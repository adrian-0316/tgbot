package com.example.telegrambot.handler;


import com.example.telegrambot.service.FactService;
import com.example.telegrambot.service.JokeService;
import com.example.telegrambot.service.RequestLimiterService;
import com.example.telegrambot.service.WeatherService;
import org.springframework.stereotype.Component;

@Component
public class CommandHandler {

    private final WeatherService weatherService;
    private final FactService factService;
    private final JokeService jokeService;
    private final RequestLimiterService requestLimiterService;

    public CommandHandler(WeatherService weatherService, FactService factService, JokeService jokeService, RequestLimiterService requestLimiterService) {
        this.weatherService = weatherService;
        this.factService = factService;
        this.jokeService = jokeService;
        this.requestLimiterService = requestLimiterService;
    }

    public String handle(String messageText, long userId) {
        if (messageText == null || messageText.isBlank()) {
            return "–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.";
        }

        String[] parts = messageText.trim().split("\\s+", 2);
        String command = parts[0];
        String arg = parts.length > 1 ? parts[1] : "";

        return switch (command) {
            case "/start" -> "–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç. –ù–∞–ø–∏—à–∏ /help, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é.";
            case "/help" -> """
                –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
                /start ‚Äî –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
                /help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
                /time ‚Äî —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                /weather [–≥–æ—Ä–æ–¥] ‚Äî –ø–æ–≥–æ–¥–∞
                /joke ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —à—É—Ç–∫–∞
                /fact ‚Äî –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
                """;
            case "/time" -> "–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: " + java.time.LocalTime.now().withNano(0);
            case "/–Ø_–ê–ª–∏—Å–∞_–ë–∞–∫—É—à" -> "–Ø —Ç–µ–±—è —Å–∏–ª—å–Ω–æ –ª—é–±–ª—é";
            case "/joke" -> {
                if (requestLimiterService.canRequestJoke(userId)) {
                    requestLimiterService.updateJokeRequestTime(userId);
                    yield jokeService.getJoke();
                } else {
                    yield "üòÖ –¢–æ–ª—å–∫–æ –æ–¥–Ω–∞ —à—É—Ç–∫–∞ –≤ –¥–µ–Ω—å! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.";
                }
            }
            case "/fact" -> {
                if (requestLimiterService.canRequestFact(userId)) {
                    requestLimiterService.updateFactRequestTime(userId);
                    yield factService.getFact();
                } else {
                    yield "üìö –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–∫—Ç –≤ –¥–µ–Ω—å! –ü–æ–ø—Ä–æ–±—É–π –∑–∞–≤—Ç—Ä–∞.";
                }
            }
            case "/weather" -> {
                if (arg.isEmpty()) {
                    yield "–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: /weather –ú–æ—Å–∫–≤–∞";
                } else {
                    yield weatherService.getWeather(arg);
                }
            }
            default -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ /help.";
        };
    }
}
